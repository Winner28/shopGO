'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TabbarScrollerIndicator = require('./TabbarScrollerIndicator');

var _TabbarScrollerIndicator2 = _interopRequireDefault(_TabbarScrollerIndicator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT = 'mdc-tab-bar-scroller';
var FRAME = ROOT + '__scroll-frame';

var TabbarScroller = function (_React$PureComponent) {
  _inherits(TabbarScroller, _React$PureComponent);

  function TabbarScroller(props) {
    _classCallCheck(this, TabbarScroller);

    var _this = _possibleConstructorReturn(this, (TabbarScroller.__proto__ || Object.getPrototypeOf(TabbarScroller)).call(this, props));

    _this.state = { translate: 0 };
    _this.tabs = [];
    return _this;
  }

  _createClass(TabbarScroller, [{
    key: 'scrollForward',
    value: function scrollForward() {
      var _frame$getBoundingCli = this.frame.getBoundingClientRect(),
          frameRight = _frame$getBoundingCli.right,
          frameLeft = _frame$getBoundingCli.left;

      var tabLeftPosition = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.tabs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var tab = _step.value;

          var _ReactDOM$findDOMNode = _reactDom2.default.findDOMNode(tab).getBoundingClientRect(),
              tabRight = _ReactDOM$findDOMNode.right,
              tabLeft = _ReactDOM$findDOMNode.left;

          if (tabRight > frameRight) {
            tabLeftPosition = tabLeft;
            break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var scrollTo = tabLeftPosition - frameLeft;

      this.setState({ translate: this.state.translate - scrollTo });
    }
  }, {
    key: 'scrollBack',
    value: function scrollBack() {
      var translate = this.state.translate;

      var newTranslate = translate + 300;
      if (newTranslate <= 0) {
        this.setState({ translate: this.state.translate + 500 });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          children = _props.children,
          otherProps = _objectWithoutProperties(_props, ['className', 'children']);

      var tabbar = _react2.default.cloneElement(_react2.default.Children.only(children), {
        className: 'mdc-tab-bar-scroller__scroll-frame__tabs',
        translate: this.state.translate,
        onTabAdded: function onTabAdded(tab) {
          _this2.tabs.push(tab);

          //console.log('dom', ReactDOM.findDOMNode(tab).getBoundingClientRect());
          //console.log('scroller add', tab.getBoundingClientRect());
        }
      });
      return _react2.default.createElement(
        'div',
        _extends({
          className: (0, _classnames2.default)(ROOT, className)
        }, otherProps),
        _react2.default.createElement(_TabbarScrollerIndicator2.default, {
          onClick: function onClick() {
            return _this2.scrollBack();
          }
        }),
        _react2.default.createElement(
          'div',
          {
            className: FRAME,
            ref: function ref(div) {
              _this2.frame = div;
            }
          },
          tabbar
        ),
        _react2.default.createElement(_TabbarScrollerIndicator2.default, {
          forward: true,
          onClick: function onClick() {
            return _this2.scrollForward();
          }
        })
      );
    }
  }]);

  return TabbarScroller;
}(_react2.default.PureComponent);

TabbarScroller.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string
};
exports.default = TabbarScroller;